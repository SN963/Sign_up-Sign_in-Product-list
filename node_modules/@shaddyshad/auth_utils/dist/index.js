function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var Realm = require('realm-web');

var authContext = React.createContext();
var AuthContextProvider = function AuthContextProvider(_ref) {
  var children = _ref.children,
      appId = _ref.appId;
  var auth = provideAuth(appId);
  return /*#__PURE__*/React__default.createElement(authContext.Provider, {
    value: auth
  }, children);
};

var provideAuth = function provideAuth(appId) {
  var app = new Realm.App({
    id: appId
  });

  var _useState = React.useState(null),
      user = _useState[0],
      setUser = _useState[1];

  var login = function login(email, password) {
    try {
      return Promise.resolve(app.logIn(Realm.Credentials.emailPassword(email, password))).then(function (user) {
        setUser(user);
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  var isLoggedIn = function isLoggedIn() {
    return app.currentUser && app.currentUser.isLoggedIn;
  };

  var logout = function logout() {
    try {
      return Promise.resolve(app.currentUser.logOut());
    } catch (e) {
      return Promise.reject(e);
    }
  };

  var sendPasswordReset = function sendPasswordReset(email) {
    try {
      return Promise.resolve(app.emailPasswordAuth.sendResetPasswordEmail(email));
    } catch (e) {
      return Promise.reject(e);
    }
  };

  var resetPassword = function resetPassword(email, password) {
    try {
      var params = new URLSearchParams(window.location.search);
      var token = params.get('token');
      var tokenId = params.get('tokenId');

      if (!token || !tokenId) {
        throw new Error("You can only call resetPassword() if the user followed a confirmation email link");
      }

      return Promise.resolve(app.emailPasswordAuth.callResetPasswordFunction(email, password));
    } catch (e) {
      return Promise.reject(e);
    }
  };

  var currentUser = function currentUser() {
    return app.currentUser;
  };

  return {
    user: user,
    app: app,
    login: login,
    isLoggedIn: isLoggedIn,
    logout: logout,
    sendPasswordReset: sendPasswordReset,
    resetPassword: resetPassword,
    currentUser: currentUser
  };
};

var useAuth = function useAuth() {
  return React.useContext(authContext);
};

exports.AuthContextProvider = AuthContextProvider;
exports.useAuth = useAuth;
//# sourceMappingURL=index.js.map
